defmodule Clouds.Users.User do
  import Ecto.Changeset,
    only: [cast: 3, validate_required: 2, unique_constraint: 2, get_field: 2, put_change: 3]

  use Ecto.Schema
  use Pow.Ecto.Schema

  use Pow.Extension.Ecto.Schema,
    extensions: [PowPersistentSession]

  alias CloudsWeb.Router.Helpers, as: Routes

  schema "users" do
    field :name, :string
    field :summary, :string
    field :username, :string

    # Autogenerated fields
    field :pub_key, :string
    field :priv_key, :string

    pow_user_fields()

    timestamps()
  end

  @doc false
  def changeset(user, attrs) do
    user
    |> pow_changeset(attrs)
    |> pow_extension_changeset(attrs)
    |> cast(attrs, [:name, :username, :summary])
    |> maybe_generate_pub_key_pair
    |> validate_required([:name, :username, :summary, :pub_key, :priv_key])
    |> unique_constraint(:username)
  end

  @doc false
  defp maybe_generate_pub_key_pair(changeset) do
    case get_field(changeset, :priv_key) do
      nil ->
        {:ok, {priv, pub}} = RsaEx.generate_keypair()

        changeset
        |> put_change(:priv_key, priv)
        |> put_change(:pub_key, pub)

      _ ->
        changeset
    end
  end

  def to_json(%Clouds.Users.User{} = user) do
    %{
      "@context" => [
        "https://www.w3.org/ns/activitystreams",
        "https://w3id.org/security/v1"
      ],
      "id" => "#{Clouds.url()}",
      "type" => "Person",
      "preferredUsername" => user.username,
      "name" => user.name,
      "summary" => user.summary,
      "inbox" => inbox_url(),
      "outbox" => outbox_url(),
      "publicKey" => %{
        "id" => pubkey_url(),
        "owner" => actor_url(),
        "publicKeyPem" => user.pub_key
      }
    }
  end

  def actor_url() do
    Routes.user_url(CloudsWeb.Endpoint, :actor)
  end

  def inbox_url() do
    Routes.user_url(CloudsWeb.Endpoint, :inbox)
  end

  def outbox_url() do
    Routes.user_url(CloudsWeb.Endpoint, :outbox)
  end

  def pubkey_url() do
    actor_url() <> "#main-key"
  end
end
